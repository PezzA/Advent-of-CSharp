@using AdventOfBlazor.Puzzles;
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"  />
        <MudText Typo="Typo.h5" Class="ml-3">Advent of Blazor</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Width="400px" >
        <MudPaper Width="400px" Elevation="0">
            <MudTreeView Items="TreeItems" @bind-ActivatedValue="ActivatedValue" Dense="true" Hover="true">
                <ItemTemplate>
                    <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems" Value="@context" OnClick="OnSelectedValuesChanged">
                        <Content>
                        <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />

                            @if (context.IsPuzzle)
                            {
                                if (context.Stars == 0)
                                {
                                    <MudIcon Icon="@Icons.Material.Rounded.StarBorder" Title="Part One" />
                                    <MudIcon Icon="@Icons.Material.Rounded.StarBorder" Title="Part Two" />
                                }

                                if (context.Stars == 1)
                                {
                                    <MudIcon Icon="@Icons.Material.Rounded.Star" Title="Part One" Color="Color.Warning"/>
                                    <MudIcon Icon="@Icons.Material.Rounded.StarBorder" Title="Part Two" />
                                }

                                if (context.Stars == 2)
                                {
                                    <MudIcon Icon="@Icons.Material.Rounded.Star" Title="Part One" Color="Color.Warning" />
                                    <MudIcon Icon="@Icons.Material.Rounded.Star" Title="Part Two" Color="Color.Warning"  />
                                }
                            }
                            
                        <MudText>@context.Title</MudText> 
                        </Content>
                     </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </MudPaper>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-16" MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private TreeItemData? ActivatedValue { get; set; }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void OnSelectedValuesChanged()
    {
        if (ActivatedValue == null || ActivatedValue.Year == 0)
        {
            NavigationManager.NavigateTo($"{Settings.WEB_PATH_PREFIX}", false);
        };

        var path = $"{Settings.WEB_PATH_PREFIX}puzzle/{ActivatedValue.Year}";

        if (ActivatedValue.Day != 0)
        {
            path += $"/{ActivatedValue.Day}";
        }

        NavigationManager.NavigateTo(path, false);
    }

    public class TreeItemData
    {
        public int Year { get; set; }
        public int Day { get; set; }

        public string Title { get; set; } = string.Empty;

        public int Stars { get; set; }

        public bool IsExpanded { get; set; }

        public bool IsPuzzle { get; set; }

        public HashSet<TreeItemData>? TreeItems { get; set; }
        public bool HasChild => TreeItems != null && TreeItems.Count > 0;

        public TreeItemData(string title, int stars, bool isExpanded, bool isPuzzle, int year = 0, int day = 0)

        {
            Title = title;
            Stars = stars;
            IsExpanded = isExpanded;
            IsPuzzle = isPuzzle;
            Year = year;
            Day = day;

        }
    }

    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    protected override void OnInitialized()
    {
        var puzzles = PuzzleManager.GetAllBasicPuzzles();

        var rootItem = new TreeItemData("Puzzles", 0, true, false);
        rootItem.TreeItems = new HashSet<TreeItemData>();

        for (var i = 2015; i < 2023; i++)
        {
            var item = new TreeItemData(i.ToString(), 0, false, false, i)
                {
                    TreeItems = puzzles
                                .Where(p => p.Year == i)
                                .OrderBy(p => p.Day)
                                .Select(p => new TreeItemData($"Day {p.Day}: {p.Title}", p.Stars, false, true, p.Year, p.Day))
                                .ToHashSet()
                };

            rootItem.TreeItems.Add(item);
        }

        TreeItems.Add(rootItem);
    }
}