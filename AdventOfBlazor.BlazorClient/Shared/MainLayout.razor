@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<MudThemeProvider IsDarkMode="true" Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
        <MudAppBar Elevation="1" Fixed="true">
            <MudIconButton Icon="@Icons.Material.Filled.Home"  Fixed="false" Color="Color.Inherit"  OnClick="@((e) => Home())" />
            <MudText Typo="Typo.h5" Class="ml-3" Color="Color.Secondary">Advent of Blazor</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary"  OnClick="@((e) => DrawerToggle())" />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Width="500px" Anchor="Anchor.Right">
            <MudText Typo="Typo.h6" Color="Color.Secondary">Puzzle List</MudText>
            <p>Click on a year to see all the current solved puzzles for that year.  The unity <img src="_content/unity/unity-logo-dark.png" style="height:24px" /> logo means that a puzzle has a specific visualisation in Unity3D </p>

            <MudExpansionPanels MultiExpansion="true">
                @foreach (var y in Years)
                {
                    <MudExpansionPanel DisableGutters="true">
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Class="mt-1">@y.ToString()</MudText>
                                <MudText Class="d-flex ml-auto">@Puzzles.Where(p => p.Year == y).Sum(p=> p.Stars)/50<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" /></MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <YearListing Year="y" PuzzleData="Puzzles.Where(p => p.Year == y)" />
                        </ChildContent>

                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudDrawer>
        <MudMainContent>
            <MudContainer Class="mt-2" MaxWidth="MaxWidth.ExtraLarge">
                @Body
            </MudContainer>
        </MudMainContent>
</MudLayout>

@code {

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void Home()
    {
        NavigationManager.NavigateTo($"{Settings.WEB_PATH_PREFIX}", false);
    }

    private IEnumerable<Puzzles.PuzzleDataAttribute> Puzzles = new List<Puzzles.PuzzleDataAttribute>();
    private IEnumerable<int> Years { get; set; } = new List<int>();

    protected override void OnInitialized()
    {
        Puzzles = PuzzleManager.GetAllBasicPuzzles()
          .Where(p => p.Year != 0 && p.Day != 0)
          .OrderBy(p => p.Year)
          .ThenBy(p => p.Day);

        Years = Puzzles.Select(p => p.Year).Distinct().Order();
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            PaletteDark = new PaletteDark()
            {
                Primary = new MudBlazor.Utilities.MudColor(255, 255, 255, 255),
                Secondary = new MudBlazor.Utilities.MudColor(0, 204, 0, 255),
                Warning = Colors.Yellow.Default,
                AppbarBackground = new MudBlazor.Utilities.MudColor(15, 15, 35, 0),
                Background = new MudBlazor.Utilities.MudColor(15, 15, 35, 255),
                DrawerBackground = new MudBlazor.Utilities.MudColor(35, 35, 55, 255)
            },
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Source Code Pro", "Helvetica", "Arial", "sans-serif" }
                }
            }
        };
}