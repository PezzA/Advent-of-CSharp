@page "/chatgpt-starfield"
@using Blazor.Extensions;
@using Microsoft.JSInterop
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Timers

<BECanvas Width="300" Height="400" @ref="_canvasRef"></BECanvas>

@code {
    private BECanvasComponent _canvasRef;
    private Canvas2DContext _context;
    private Timer timer;
    private Star[] stars;
    private const int NumStars = 100;

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get the canvas and context
           _context = await _canvasRef.CreateCanvas2DAsync();

            // Generate the stars
            var random = new Random();
            stars = new Star[NumStars];
            for (int i = 0; i < NumStars; i++)
            {
                int x = random.Next((int)_canvasRef.Width);
                int y = random.Next((int)_canvasRef.Height);
                int size = random.Next(1, 4);
                stars[i] = new Star(x, y, size);
            }

            // Start the animation timer
            timer = new Timer(20);
            timer.Elapsed += Timer_Elapsed;
            timer.Start();
        }
    }


    private async void Timer_Elapsed(object sender, ElapsedEventArgs e)
    {
        // Clear the canvas
        await _context.ClearRectAsync(0, 0, (int)_canvasRef.Width, (int)_canvasRef.Height);

        // Move the stars
        foreach (var star in stars)
        {
            star.Move((int)_canvasRef.Width, (int)_canvasRef.Height);
            await _context.FillRectAsync(star.X, star.Y, star.Size, star.Size);
        }
    }

    class Star
    {
        public int X { get; set; }
        public int Y { get; set; }
        public int Size { get; set; }
        private readonly Random random = new Random();
        private int speed = 2;

        public Star(int x, int y, int size)
        {
            X = x;
            Y = y;
            Size = size;
        }

        public void Move(int maxX, int maxY)
        {
            X -= speed;
            if (X < 0)
            {
                X = maxX;
                Y = random.Next(maxY);
            }
        }
    }
}
