@page "/puzzle/{Year:int}/{Day:int}"
@using System.Diagnostics;
@using System.Timers;
@inject NavigationManager NavigationManager

@if (puzzleMetaData == null || puzzle == null)
{
    <h2>Puzzle Not Found</h2>
    <hr />
    <p>Apologies! Either the implementation or metadata for the puzzle could not be found.</p>
}
else
{
    <h2>
        <MudText Color="Color.Primary">--- (@puzzleMetaData.Year) Day @puzzleMetaData.Day: @puzzleMetaData.Title ---</MudText>
    </h2>
    

    <h3><MudText  Color="Color.Secondary" Class="mb-2">-- Embedded Implementation --</MudText></h3>
    <p> The embedded implementation is in the advent-of-blazor repo and delivered as part of the Web Assembly binary.</p>
    <MudGrid>
        <MudItem xs="6">
           <PuzzlePart @ref="partOne" Title="Part One" Action="()=> puzzle.PartOne(puzzle.PuzzleInput())"/>
        </MudItem>
        <MudItem xs="6">
            <PuzzlePart @ref="partTwo" Title="Part Two" Action="()=> puzzle.PartTwo(puzzle.PuzzleInput())" />
        </MudItem>
    </MudGrid>

    @if (@puzzleMetaData.HasVisualisation)
    {
        <h3><MudText Color="Color.Secondary" Class="mb-2">-- Unity3D Visualisation --</MudText></h3>
    }
    // this just hides & displays to minimise unity player issues
    <UnityApp Visible="@puzzleMetaData.HasVisualisation"/>    
}

@code {
    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Day { get; set; }

    private PuzzlePart? partOne;
    private PuzzlePart? partTwo;

    private IBasicPuzzle? puzzle;

    private PuzzleDataAttribute? puzzleMetaData;

    protected override void OnInitialized()
    {
        ResetState();
    }

    protected override void OnParametersSet()
    {
        ResetState();
        partOne?.RefreshMe();
    }

    void ResetState()
    {
        puzzle = PuzzleManager.GetPuzzle(Year, Day);
        puzzleMetaData = PuzzleManager.GetPuzzleMetaData(Year, Day);
    }
}
