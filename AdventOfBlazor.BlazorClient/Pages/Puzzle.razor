@page "/puzzle/{Year:int}/{Day:int}"
@using System.Diagnostics;
@using System.Timers;
@inject NavigationManager NavigationManager

@if (puzzleMetaData == null || puzzle == null)
{
    <h2>Puzzle Not Found</h2>
    <hr />
    <p>Apologies! Either the implementation or metadata for the puzzle could not be found.</p>
}
else
{
    <h2>@puzzleMetaData.Title</h2>
    <hr />
    <p>@puzzleMetaData.Year, Day @puzzleMetaData.Day</p>

    <MudGrid Class="mt-4">
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Part One</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@PartOneText</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" OnClick="ButtonOneClick">Run</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Part Two</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@PartTwoText</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" OnClick="ButtonTwoClick">Run</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>


}


@code {
    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Day { get; set; }

    private IBasicPuzzle? puzzle;

    private PuzzleDataAttribute? puzzleMetaData;

    protected override void OnInitialized()
    {
        puzzle = PuzzleManager.GetPuzzle(Year, Day);
        puzzleMetaData = PuzzleManager.GetPuzzleMetaData(Year, Day);

    }

    protected override void OnParametersSet()
    {
        puzzle = PuzzleManager.GetPuzzle(Year, Day);
        puzzleMetaData = PuzzleManager.GetPuzzleMetaData(Year, Day);
    }

    public string PartOneText { get; set; } = "... waiting for run  ...";
    public string PartTwoText { get; set; } = "... waiting for run  ...";

    void ButtonOneClick()
    {
        var sw = new Stopwatch();
        var result = string.Empty;

        sw.Start();

        try
        {
            if (puzzle == null)
            {
                PartOneText = "Null Puzzle";
                return;
            }
            result = puzzle.PartOne(puzzle.PuzzleInput())[0];
        }
        catch (Exception err)
        {
            result = err.Message;
        }

        sw.Stop();

        PartOneText = $"{result} ({sw.Elapsed.ToString()})";
    }

    void ButtonTwoClick()
    {

        var sw = new Stopwatch();
        var result = string.Empty;

        sw.Start();

        try
        {
            if (puzzle == null)
            {
                PartTwoText = "Null Puzzle";
                return;
            }

            result = puzzle.PartTwo(puzzle.PuzzleInput())[0];
        }
        catch (Exception err)
        {
            result = err.Message;
        }

        sw.Stop();

        PartTwoText = $"{result} ({sw.Elapsed.ToString()})";
    }

}
