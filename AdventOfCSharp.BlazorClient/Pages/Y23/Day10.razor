@page "/viz/2023/10"
@using Blazor.Extensions.Canvas.Canvas2D;
@using AdventOfCSharp.Puzzles.Geometery
@using AdventOfCSharp.BlazorClient.Shared.Canvas
@using AdventOfCSharp.Puzzles.Year23.Day10;
@using AdventOfCSharp.BlazorClient.Shared.Puzzle
<PuzzleTitle MetaData="Y23D10.Model.MetaData"/>

<img @ref="_bar" hidden id="_bar" @onload="AssetsLoaded" src="assets/images/pipes/spritemap.png"/>

<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" OnClick="StartPartOne">Part One</MudButton>
<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary">Part Two</MudButton>

<AdventCanvas @ref="_adventCanvas" Update="@Update" Render="@Render" Model="@_model"></AdventCanvas>

<MudExpansionPanels Class="mt-2" Dense="true" DisableBorders="true">
    <MudExpansionPanel Text="Notes">
        <p>
            <ul>
                <li>First visualisation of 2023!</li>
            </ul>
            <ul>
                <li>First use of a spritesheet!</li>
            </ul>
        </p>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private ElementReference _bar;
    private readonly Y23D10.Model _model = new();
    private AdventCanvas<Y23D10.Model>? _adventCanvas;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_adventCanvas == null) return;


            var drawWidth = _model.CellWidth * _model.GridWidth + 1;
            var drawHeight = _model.CellWidth * _model.GridHeight + 1;

            await _adventCanvas.InitCanvas(drawWidth, drawHeight);
        }
    }

    private async Task RenderMap(Y23D10.Model model, Canvas2DContext context)
    {
        await context.BeginBatchAsync();

        await context.SetFillStyleAsync("black");
        await context.FillRectAsync(
            0,
            0,
            model.GridWidth * model.CellWidth + 1,
            model.GridHeight * model.CellWidth + 1);

        var grid = model.Grid;
        await context.SetFillStyleAsync("green");

        var start = model.Start;
        for (var x = 0; x < model.GridWidth; x++)
        {
            for (var y = 0; y < model.GridWidth; y++)
            {
                var currPos = new Point2D(x, y);
                if (!Puzzle.IsConnected(currPos, grid)) continue;

                switch (grid[y][x])
                {
                    case 'S':
                        await DrawCell(currPos, "red", model.CellWidth, context);
                        continue;
                    case '|':
                        await context.DrawImageAsync(_bar, 7, 0, model.CellWidth, model.CellWidth, currPos.X * model.CellWidth, currPos.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                        continue;
                    case '-':
                        await context.DrawImageAsync(_bar, 0, 0, model.CellWidth, model.CellWidth, currPos.X * model.CellWidth, currPos.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                        continue;
                    case 'L':
                        await context.DrawImageAsync(_bar, 35, 0, model.CellWidth, model.CellWidth, currPos.X * model.CellWidth, currPos.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                        continue;
                    case 'F':
                        await context.DrawImageAsync(_bar, 21, 0, model.CellWidth, model.CellWidth, currPos.X * model.CellWidth, currPos.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                        continue;
                    case '7':
                        await context.DrawImageAsync(_bar, 14, 0, model.CellWidth, model.CellWidth, currPos.X * model.CellWidth, currPos.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                        continue;
                    case 'J':
                        await context.DrawImageAsync(_bar, 28, 0, model.CellWidth, model.CellWidth, currPos.X * model.CellWidth, currPos.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                        continue;
                }
            }
        }

        await context.EndBatchAsync();
    }

    private static async ValueTask DrawCell(Point2D pos, string? color, int cellWidth, Canvas2DContext context, bool border = false)
    {
        if (!string.IsNullOrEmpty(color))
        {
            await context.SetFillStyleAsync(color);
        }

        if (border)
        {
            await context.FillRectAsync(pos.X * cellWidth + 1, pos.Y * cellWidth + 1, cellWidth - 1, cellWidth - 1);
            return;
        }

        await context.FillRectAsync(pos.X * cellWidth, pos.Y * cellWidth, cellWidth, cellWidth);
    }

    private async Task Update(float delta, float timeStamp, int checksPerFrame)
    {
        if (_adventCanvas == null) return;
            
        if (_model.Update())
        {
            Console.WriteLine($"Finished at {timeStamp}");
            await _adventCanvas.StartAnimLoop();
        }
    }

    async Task Render(Y23D10.Model model, Canvas2DContext context)
    {
        await context.BeginBatchAsync();
        await context.SetFillStyleAsync("#00FFFF");

        var drawArray = _model.Queue.ToArray();

        foreach (var point in drawArray)
        {
            switch (model.Grid[point.Y][point.X])
            {
                case '|':
                    await context.DrawImageAsync(_bar, 7, 7, model.CellWidth, model.CellWidth, point.X * model.CellWidth, point.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                    continue;
                case '-':
                    await context.DrawImageAsync(_bar, 0, 7, model.CellWidth, model.CellWidth, point.X * model.CellWidth, point.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                    continue;
                case 'L':
                    await context.DrawImageAsync(_bar, 35, 7, model.CellWidth, model.CellWidth, point.X * model.CellWidth, point.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                    continue;
                case 'F':
                    await context.DrawImageAsync(_bar, 21, 7, model.CellWidth, model.CellWidth, point.X * model.CellWidth, point.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                    continue;
                case '7':
                    await context.DrawImageAsync(_bar, 14, 7, model.CellWidth, model.CellWidth, point.X * model.CellWidth, point.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                    continue;
                case 'J':
                    await context.DrawImageAsync(_bar, 28, 7, model.CellWidth, model.CellWidth, point.X * model.CellWidth, point.Y * model.CellWidth, model.CellWidth, model.CellWidth);
                    continue;
            }

            await DrawCell(point, null, model.CellWidth, context);
        }

        await context.EndBatchAsync();
    }

    private async Task StartPartOne(MouseEventArgs obj)
    {
        if (_adventCanvas == null) return;

        _model.Init();
        await _adventCanvas.StartAnimLoop();
    }

    private async Task AssetsLoaded()
    {
        if (_adventCanvas == null) return;

        await _adventCanvas.AdHocRender(RenderMap);
    }
}