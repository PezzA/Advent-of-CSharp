@page "/viz/2022/14"
@using AdventOfCSharp.BlazorClient.Shared.Puzzle
@using AdventOfCSharp.Puzzles.Geometery;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using AdventOfCSharp.Puzzles.Year22.Day14;
@using static AdventOfCSharp.Puzzles.Year22.Day14.Puzzle;
@inject IJSRuntime JsRuntime;

<PuzzleTitle MetaData="_metaData" />

<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" OnClick="@StartPartOne">Part One</MudButton>
<MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" OnClick="@StartPartTwo">Part Two</MudButton>


<MudSlider @bind-Value="_checksPerFrame" Min="1" Max="80" Color="MudBlazor.Color.Info">Checks Per Update: @_checksPerFrame</MudSlider>
<MudSlider @bind-Value="_updateTimer" Min="1" Max="60" Color="MudBlazor.Color.Warning">Updates Per Second: @_updateTimer</MudSlider>

@_drops

<div style="width:100%;" class="mt-2">
    <BECanvas @ref="_canvas"></BECanvas>
</div>


<MudExpansionPanels Class="mt-2" Dense="true" DisableBorders="true">
    <MudExpansionPanel Text="Notes">
        <p></p>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Properties" IsInitiallyExpanded="true">
        @if (_canvasProperties != null)
        {
            <MudSimpleTable Hover="true" Dense="true" FixedHeader="false">
                <thead>
                    <tr>
                        <th>Property</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Device Pixel Ratio</td>
                        <td>@_canvasProperties.Window.DevicePixelRatio</td>
                    </tr>
                    <tr>
                        <td>Window Inner Width</td>
                        <td>@_canvasProperties.Window.InnerWidth</td>
                    </tr>
                    <tr>
                        <td>Wanted Width</td>
                        <td>@_canvasProperties.Width</td>
                    </tr>
                    <tr>
                        <td>Wanted Height</td>
                        <td>@_canvasProperties.Height</td>
                    </tr>
                    <tr>
                        <td>Scaled Width</td>
                        <td>@_canvasProperties.ScaledWidth</td>
                    </tr>
                    <tr>
                        <td>Scaled Height</td>
                        <td>@_canvasProperties.ScaledHeight</td>
                    </tr>
                    <tr>
                        <td>Cell Width</td>
                        <td>@_cellWidth</td>
                    </tr>
                    <tr>
                        <td>Grid Width</td>
                        <td>@_gridWidth</td>
                    </tr>
                    <tr>
                        <td>Grid Height</td>
                        <td>@_gridHeight</td>
                    </tr>
                    <tr>
                        <td>Bounds</td>
                        <td>@_tl : @_br</td>
                    </tr>
                </tbody>
            </MudSimpleTable>
        }
    </MudExpansionPanel>
</MudExpansionPanels>


@code {

    // Canvas
    private Canvas2DContext? _context;
    private BECanvasComponent? _canvas;
    private CanvasProperties? _canvasProperties;

    public record WindowProperties(int InnerWidth, float DevicePixelRatio, int ParentWidth, int ParentHeight);

    public record CanvasProperties(int Width, int Height, WindowProperties Window)
    {
        public int ScaledWidth => (int)Math.Ceiling(Width * Window.DevicePixelRatio);
        public int ScaledHeight => (int)Math.Ceiling(Height * Window.DevicePixelRatio);
    }

    private int _checksPerFrame = 10;
    private float _updateTimer = 60;

    private int _cellWidth;
    private int _gridWidth;
    private int _gridHeight;
    private Point2D? _tl;
    private Point2D? _br;
    private readonly Puzzle _puzzle = new ();
    private readonly IBasicPuzzle _basicPuzzle = new Puzzle();
    private readonly PuzzleDataAttribute _metaData = PuzzleManager.GetPuzzleMetaData(2022, 14) ?? throw new NotImplementedException();

    public const string TestData = @"498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (_canvas == null) return;

            var windowProperties = await JsRuntime.InvokeAsync<WindowProperties>("getWindowDetails", _canvas);

            _cells = _puzzle.CreateLayout(Puzzle.LoadData(_basicPuzzle.PuzzleInput()));

            _tl = _puzzle.GetTopLeft(_cells);
            _br = _puzzle.GetBottomRight(_cells);

            if (_br != null)
            {
                if (_tl != null) _gridWidth = (_br.X - _tl.X) + 4;

                _gridHeight = _br.Y + 7;
            }


            // _cellWidth = windowProperties.ParentWidth / _gridWidth;
            _cellWidth = 10;
            var drawWidth = (_cellWidth * _gridWidth) + 1;
            var drawHeight = (_cellWidth * _gridHeight) + 1;

            _canvasProperties = new CanvasProperties(drawWidth, drawHeight, windowProperties);

            _ = await JsRuntime.InvokeAsync<string>("setupCanvas",
                _canvas,
                _canvasProperties.Width,
                _canvasProperties.Height,
                _canvasProperties.ScaledWidth,
                _canvasProperties.ScaledHeight);

            StateHasChanged();
            _context = await _canvas.CreateCanvas2DAsync();
            await _context.ScaleAsync(_canvasProperties.Window.DevicePixelRatio, _canvasProperties.Window.DevicePixelRatio);

            await _context.BeginBatchAsync();
            await RenderMap();
            await _context.EndBatchAsync();
        }
    }

    private Dictionary<Point2D, CellContents> _cells = new Dictionary<Point2D, CellContents>();

    private async Task StartPartOne()
    {
        await JsRuntime.InvokeAsync<object>("startAnimLoop", DotNetObjectReference.Create(this));
        if (_canvas == null || _context == null) return;
        _cells = _puzzle.CreateLayout(Puzzle.LoadData(_basicPuzzle.PuzzleInput()));

        _drops = 0;
        _partTwo = false;

        await _context.BeginBatchAsync();
        await RenderMap();
        await _context.SetFillStyleAsync("beige");
        await _context.EndBatchAsync();
    }


    private bool _partTwo;

    private async Task StartPartTwo()
    {
        await JsRuntime.InvokeAsync<object>("startAnimLoop", DotNetObjectReference.Create(this));
        if (_canvas == null || _context == null) return;
        _cells = _puzzle.CreateLayout(Puzzle.LoadData(_basicPuzzle.PuzzleInput()));
        _drops = 0;
        _partTwo = true;
        await _context.BeginBatchAsync();
        await RenderMap();
        await _context.SetFillStyleAsync("beige");
        await _context.EndBatchAsync();
    }

    private async ValueTask RenderMap()
    {
        if (_context == null || _canvasProperties == null) return;

        await _context.SetStrokeStyleAsync("white");
        await _context.ClearRectAsync(0, 0, _canvasProperties.Width, _canvasProperties.Height);
        await _context.StrokeRectAsync(0, 0, _canvasProperties.Width, _canvasProperties.Height);

        await _context.SetFillStyleAsync("grey");

        foreach (var cell in _cells)
        {
            if (_tl != null) await _context.FillRectAsync((cell.Key.X - _tl.X + 2) * _cellWidth, (cell.Key.Y + 2) * _cellWidth, _cellWidth, _cellWidth);
        }

        await _context.SetFillStyleAsync("blue");
        if (_tl != null) await _context.FillRectAsync((500 - _tl.X + 2) * _cellWidth, 2 * _cellWidth, _cellWidth, _cellWidth);
    }

    private float _lastTimeStamp;
    private float _interval;

    private float _drops;

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        if (_context == null || _canvas == null) return;

        var delta = timeStamp - _lastTimeStamp;
        _lastTimeStamp = timeStamp;


        await _context.BeginBatchAsync();
        _interval += delta;

        if (_interval > (1000 / _updateTimer))
        {
            _interval = 0;

            for (int i = 0; i < _checksPerFrame; i++)
            {

                var restingPlace = _puzzle.DropSand(_cells, new Point2D(500, 0),_br, _partTwo);

                var finished = !_partTwo
                    ? restingPlace == new Point2D(0, 0)
                    : restingPlace == new Point2D(500, 0);

                if (finished)

                {
                    await JsRuntime.InvokeAsync<object>("stopAnimLoop");
                }
                else    
                {

                    _drops++;
                    StateHasChanged();

                    _cells[restingPlace] = CellContents.Sand;
                    if (_tl != null) await _context.FillRectAsync((restingPlace.X - _tl.X + 2) * _cellWidth, (restingPlace.Y + 2) * _cellWidth, _cellWidth, _cellWidth);
                }
            }
        }

       
        await _context.EndBatchAsync();

    }
}
