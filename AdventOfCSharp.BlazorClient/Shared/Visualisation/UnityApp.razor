@inject IJSRuntime JS
@implements IDisposable
@inject NavigationManager NavigationManager

<div id="unity-container" class="unity-desktop" >
    <canvas id="unity-canvas"></canvas>
    <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
            <div id="unity-progress-bar-full"></div>
        </div>
    </div>
    <div id="unity-warning"> </div>
    <div id="unity-footer">
        <div id="unity-webgl-logo"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title">Advent of Unity</div>
    </div>
</div>

@code {

    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        JS.InvokeAsync<string>("loadUnity");

        return base.OnAfterRenderAsync(firstRender);
    }

    void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        JS.InvokeAsync<string>("unloadUnity");
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }
}
