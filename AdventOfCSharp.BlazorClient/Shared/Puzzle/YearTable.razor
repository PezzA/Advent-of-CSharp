@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudSimpleTable Dense="true" Hover="true" Bordered="false" Style="overflow-x: auto;">
    <tbody>
        @foreach (var puzzle in @PuzzleData)
        {
            <tr>
                <td><MudRating SelectedValue="@puzzle.Stars" MaxValue="2" ReadOnly="true" Color="MudBlazor.Color.Warning" /></td>
                <td>@puzzle.Title</td>
                <td>@if (!string.IsNullOrEmpty(puzzle.ShowTheLove)) {
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Favorite" Color="MudBlazor.Color.Error" OnClick="@((e) => OpenDialog(puzzle.ShowTheLove))"></MudIconButton>
                }
                </td>
                <td>
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.PlayArrow" Color="MudBlazor.Color.Success" OnClick="@((e) => NavigateRun(puzzle))">Run</MudButton>
                </td>
                <td>
                    @if (puzzle.HasHTML5Visualisation)
                    {
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Html" Color="MudBlazor.Color.Tertiary" OnClick="@((e) => NavigateViz(puzzle))">Run HTML Visualisation</MudIconButton>
                    }
                    @if (puzzle.HasUnityVisualisation)
                    {
                        <img width="32px" src="_content/unity/unity-logo-dark.png"/>
                        <MudButton Color="MudBlazor.Color.Tertiary" OnClick="@((e) => NavigateViz(puzzle))">Run Unity Visualisation</MudButton>
                    }
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    [Parameter]
    public int Year { get; set; } = 0;

    [Parameter]
    public IEnumerable<PuzzleDataAttribute> PuzzleData { get; set; } = new List<Puzzles.PuzzleDataAttribute>();

    private void OpenDialog(string text)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<ShowTheLove>(text, options);
    }

    private void NavigateRun(PuzzleDataAttribute data)
    {
        var day = data.Day.ToString("D2");
        NavigationManager.NavigateTo($"{Settings.WEB_PATH_PREFIX}puzzle/{data.Year}/{day}", false);

    }
    private void NavigateViz(PuzzleDataAttribute data)
    {
        var day = data.Day.ToString("D2");
        NavigationManager.NavigateTo($"{Settings.WEB_PATH_PREFIX}viz/{data.Year}/{day}", false);
    }
}
