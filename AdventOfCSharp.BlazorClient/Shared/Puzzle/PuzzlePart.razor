@using System.Diagnostics;
<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Title</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>@StatusText</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="RunPuzzle">Run</MudButton>
    </MudCardActions>
</MudCard>


<ApexChart TItem="Timing"
           Title="Execution time (ms)"
           Options="options"
           @ref=chart>

    <ApexPointSeries TItem="Timing"
                     Items="timings"
                     Name="Execution time (ms)"
                     SeriesType="SeriesType.Line"
                     XValue="@(e => $"Run {e.Index}")"
                     YValue="@(e => Convert.ToDecimal(e.Time))" />

</ApexChart>

@code {
    [Parameter]
    public string Title { get; set; } = "Not Set";

    [Parameter]
    public Func<string[]> Action { get; set; } = () => new string[] { "No action specified" };

    private const string NOT_YET_RUN = "... waiting for run  ...";

    private string StatusText { get; set; } = NOT_YET_RUN;


    public List<Timing> timings = new List<Timing>();

    private ApexChart<Timing>? chart;
    private ApexChartOptions<Timing> options => new ApexChartOptions<Timing>()
        {
            Theme = new Theme
            {
                Mode = Mode.Dark,
                Palette = PaletteType.Palette1,
            },
            Chart = new Chart
            {
                Toolbar = new Toolbar
                {
                    Show = false
                }
            },
            Xaxis = new XAxis
            {
                Labels = new XAxisLabels()
                {
                    Show = false    
                }    
            }

        };

    public class Timing
    {
        public double Time { get; set; }
        public int Index { get; set; }
    }

    private int runs;

    public async void RefreshMe()
    {
        StatusText = NOT_YET_RUN;
        timings = new List<Timing>();
        if (chart != null)
        {
            await chart.UpdateSeriesAsync(true);
            await chart.RenderAsync();
        }
        StateHasChanged();
    }

    async void RunPuzzle()
    {
        runs++;
        var sw = new Stopwatch();
        var result = string.Empty;

        sw.Start();

        try
        {
            result = Action.Invoke()[0];
        }
        catch (Exception err)
        {
            result = err.Message;
        }
        sw.Stop();

        timings.Add(new Timing() { Time = sw.Elapsed.TotalMilliseconds, Index = runs });

        StatusText = $"{result}";

        if (chart != null)
        {
            await chart.UpdateSeriesAsync(true);
        }
    }
}
