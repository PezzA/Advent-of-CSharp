<MudText Typo="Typo.h6" Color="MudBlazor.Color.Secondary">Puzzle List</MudText>

<MudExpansionPanels MultiExpansion="true">
    @foreach (var y in Years)
    {
        <MudExpansionPanel DisableGutters="true">
            <TitleContent>
                <div class="d-flex">
                    <MudText Class="mt-1">@y.ToString()</MudText>
                    <MudText Class="d-flex ml-auto">@Puzzles.Where(p => p.Year == y).Sum(p=> p.Stars)/50<MudIcon Icon="@Icons.Material.Filled.Star" Color="MudBlazor.Color.Warning" /></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <YearListing Year="y" PuzzleData="Puzzles.Where(p => p.Year == y)" />
            </ChildContent>

        </MudExpansionPanel>
    }
</MudExpansionPanels>

<p class="mt-2">How is this list generated?</p>
<p class="mt-2">
    <a href="https://github.com/PezzA/advent-of-blazor/blob/master/AdventOfCSharp.Puzzles/Year15/Day01/Puzzle.cs#L4" target="_blank">Class attributes</a> carry all the <a href="https://github.com/PezzA/advent-of-blazor/blob/master/AdventOfCSharp.Puzzles/PuzzleDataAtrribute.cs" target="_blank">meta data</a> for a puzzle.
    This is then <a href="https://github.com/PezzA/advent-of-blazor/blob/master/AdventOfCSharp.Puzzles/PuzzleManager.cs" target="_blank">queried</a> to form the main content repository for the website.
</p>

@code {
    private IEnumerable<Puzzles.PuzzleDataAttribute> Puzzles = new List<Puzzles.PuzzleDataAttribute>();
    private IEnumerable<int> Years { get; set; } = new List<int>();

    protected override void OnInitialized()
    {
        Puzzles = PuzzleManager.GetAllBasicPuzzles()
          .Where(p => p.Year != 0 && p.Day != 0)
          .OrderBy(p => p.Year)
          .ThenBy(p => p.Day);

        Years = Puzzles.Select(p => p.Year).Distinct().Order();
    }
}
