# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Advent of Blazor Main CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore

    - name: sed Settings.cs
      run: sed -i 's/WEB_PATH_PREFIX = "\/"/WEB_PATH_PREFIX = "\/advent-of-csharp\/"/g' AdventOfCSharp.BlazorClient/Settings.cs
    
    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal
      
    # Basic build and publish steps taken from https://ilovedotnet.org/blogs/blazor-wasm-publishing-to-github-pages      
    # Install dotnet wasm buildtools workload
    - name: Install .NET WASM Build Tools
      if: github.ref == 'refs/heads/master'
      run: dotnet workload install wasm-tools
      
    # Publishes Blazor project to the release-folder
    - name: Publish .NET Core Project
      if: github.ref == 'refs/heads/master'  
      run: dotnet publish AdventOfCSharp.BlazorClient/AdventOfCSharp.BlazorClient.csproj -c:Release -p:GHPages=true -o dist/Web --nologo

    # changes the base-tag in index.html from '/' to '/advent-of-blazor' to match GitHub Pages repository subdirectory
    # fix fromhttps://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages
    - name: sed index.html
      if: github.ref == 'refs/heads/master'  
      run: sed -i 's/<base href="\/" \/>/<base href="\/advent-of-csharp\/" \/>/g' dist/Web/wwwroot/index.html

      # fix for integrity checks from https://swimburger.net/blog/dotnet/fix-blazor-webassembly-pwa-integrity-checks
    - name: Fix service-worker-assets.js hashes
      working-directory: dist/Web/wwwroot
      if: github.ref == 'refs/heads/master'  
      run: |
        jsFile=$(<service-worker-assets.js)
        # remove JavaScript from contents so it can be interpreted as JSON
        json=$(echo "$jsFile" | sed "s/self.assetsManifest = //g" | sed "s/;//g")
        # grab the assets JSON array
        assets=$(echo "$json" | jq '.assets[]' -c)
        for asset in $assets
        do
          oldHash=$(echo "$asset" | jq '.hash')
          #remove leading and trailing quotes
          oldHash="${oldHash:1:-1}"
          path=$(echo "$asset" | jq '.url')
          #remove leading and trailing quotes
          path="${path:1:-1}"
          newHash="sha256-$(openssl dgst -sha256 -binary $path | openssl base64 -A)"
          
          if [ $oldHash != $newHash ]; then
            # escape slashes for json
            oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
            newHash=$(echo "$newHash" | sed 's;/;\\/;g')
            echo "Updating hash for $path from $oldHash to $newHash"
            # escape slashes second time for sed
            oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
            jsFile=$(echo -n "$jsFile" | sed "s;$oldHash;$newHash;g")
          fi
        done

        echo -n "$jsFile" > service-worker-assets.js
        
    # add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. (Allow files and folders starting with an underscore)
    - name: Add .nojekyll file
      if: github.ref == 'refs/heads/master'  
      run: touch dist/Web/wwwroot/.nojekyll
      
    - name: Commit wwwroot to GitHub Pages
      if: github.ref == 'refs/heads/master'  
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: dist/Web/wwwroot      
